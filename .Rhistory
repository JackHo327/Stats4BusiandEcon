# runs <- NULL
runs <- vector(length=n) #allocate the memory ahead of time
count <- 0
for(i in 1:(n-t+1)){
if(all(x[(i:(i+t-1))]==1)){
count <- count+1
runs[count] <- i
#runs <- c(runs,i)
}
if(count >0){
runs #<- runs[1:count]
}else{
runs <- NULL
}
return(runs)
}
time1 <- system.time(findRunsM(y,2))
time1
findRunsM <- function(x,t){
n <- length(x)
# runs <- NULL
runs <- vector() #allocate the memory ahead of time
count <- 0
for(i in 1:(n-t+1)){
if(all(x[(i:(i+t-1))]==1)){
count <- count+1
runs[count] <- i
#runs <- c(runs,i)
}
if(count >0){
runs #<- runs[1:count]
}else{
runs <- NULL
}
return(runs)
}
time1 <- system.time(findRunsM(y,2))
time1
time2
findRunsM <- function(x,t){
n <- length(x)
# runs <- NULL
runs <- vector(length=n) #allocate the memory ahead of time
count <- 0
for(i in 1:(n-t+1)){
if(all(x[(i:(i+t-1))]==1)){
count <- count+1
runs[count] <- i
#runs <- c(runs,i)
}
if(count >0){
runs #<- runs[1:count]
}else{
runs <- NULL
}
return(runs)
}
time1 <- system.time(findRunsM(y,2))
time2 <- system.time(findRunsWM(y,2))
time1
y <- as.integer(runif(100000,min=0,max=2))
time1 <- system.time(findRunsM(y,2))
time2 <- system.time(findRunsWM(y,2))
time1 >time2 # time1 < time2- means allocating the memory can improve the efficiency of operation
time1
time2
findRunsM <- function(x,t){
n <- length(x)
# runs <- NULL
runs <- vector() #allocate the memory ahead of time
count <- 0
for(i in 1:(n-t+1)){
if(all(x[(i:(i+t-1))]==1)){
count <- count+1
runs[count] <- i
#runs <- c(runs,i)
}
if(count >0){
runs #<- runs[1:count]
}else{
runs <- NULL
}
return(runs)
}
time1 <- system.time(findRunsM(y,2))
time1
perda <- function(x,k){
n <- length(x)
k2 <- k/2
pred <- vector(length = n)
for(i in 1:(n-k)){
if(sum(x[i:(i+k-1)])>=k2){
pred[i] <- 1
}else{
pred[i] <- 0
}
return(mean(abs(pred-x[(k+1):n])))
}
perda(y,3)
perda <- function(x,k){
n <- length(x)
k2 <- k/2
pred <- vector(length = n)
for(i in 1:(n-k)){
if(sum(x[i:(i+k-1)])>=k2){
pred[i] <- 1
}else{
pred[i] <- 0
}
#return(mean(abs(pred-x[(k+1):n])))
return(pred)
}
a <- perda(y,3)
a[1:10]
perda <- function(x,k){
n <- length(x)
k2 <- k/2
pred <- vector(length = n-k)
for(i in 1:(n-k)){
if(sum(x[i:(i+k-1)])>=k2){
pred[i] <- 1
}else{
pred[i] <- 0
}
return(mean(abs(pred-x[(k+1):n])))
#return(pred)
}
a <- perda(y,3)
rm(a)
a1 <- perda(y,3)
a2 <- perda(y,2)
a3 <- perda(y,4)
a4 <- perda(y,5)
a5 <- perda(y,40)
rm(a5)
a <- boolean
a <- boolean()
predb <- function(x,k){
n <- length(x)
k2 <- k/2
pred <- vector(length = n-k)
sm <- sum(x[1:k])
if(sm >= k2){
pred[1] <- 1
}else{
pred[1] <-0
}
if(n-k >= 2){
for(i in 2:(n-k)){
sm <- sm + x[i+k-1] - x[i-1]
if(sm >= k2){
pred[i] <- 1
}else{
pred[i] <- 0
}
return(mean(abs(pred-x[(k+1):n])))
}
b1 <- perdb(y,3)
b2 <- perdb(y,2)
b3 <- perdb(y,4)
b4 <- perdb(y,5)
predb <- function(x,k){
n <- length(x)
k2 <- k/2
pred <- vector(length = n-k)
sm <- sum(x[1:k])
if(sm >= k2){
pred[1] <- 1
}else{
pred[1] <-0
}
if(n-k >= 2){
for(i in 2:(n-k)){
sm <- sm + x[i+k-1] - x[i-1]
if(sm >= k2){
pred[i] <- 1
}else{
pred[i] <- 0
}
return(mean(abs(pred-x[(k+1):n])))
}
b1 <- perdb(y,3)
b1 <- predb(y,3)
b2 <- predb(y,2)
b3 <- predb(y,4)
b4 <- predb(y,5)
list(rm=TRUE)
rm(list=ALL)
rm(list=TRUE)
rm(ls(ALL)=TRUE)
rm(list=ls())
#get length of a vector
x <- rnorm(1000)
length(x)
m <- matrix(1:100,25,4)
mm <- m+10:109
#automatic filled up
set.seed(123)
v1 <- rnorm(5)
v2 <- rnorm(6) #v1 and v2 aren't the same long
v1
v2
v1+v2 # v1 is one element less than v2, so the first element will be reused again (automatic  filled up)
#usual ways to calculate vectors
v3 <- runif(10)
v4 <- runif(10)
v3/v4
v3*v4
v3+v4
v3-v4
v5 <- v3[1:(length(v3)-1)] #or v5 <- v3[-length(v3)]
#colon
5:8
1:8-1 #“：” has a higher priority than regular rule of algorithm
1:(8-1) #brackets has a higher priority than ":"
#seq()- create arithmetic sequence
seq(from =3,to= 10,by=2)
seq(3,10,length=10)
seq(v1)
#rep()- create repeated nums
rep(x = c(1,2,3,4),2)
rep(x = c(1,2,3,4),length=9)
rep(x = c(1,2,3,4),times=3)
rep(x = c(1,2,3,4),each=2)
#all() and any()
all(x>0)
any(x>0)
findRunsM <- function(x,t){
n <- length(x)
# runs <- NULL
runs <- vector(length=n) #allocate the memory ahead of time, use "vector()" (do not define length=n will also accelerate the operating speed)
count <- 0
for(i in 1:(n-t+1)){
if(all(x[(i:(i+t-1))]==1)){
count <- count+1
runs[count] <- i
#runs <- c(runs,i)
}
if(count >0){
runs #<- runs[1:count]
}else{
runs <- NULL
}
return(runs)
}
findRunsWM <- function(x,t){
n <- length(x)
runs <- NULL
# runs <- vector() #allocate the memory ahead of time
# count <- 0
for(i in 1:(n-t+1)){
if(all(x[(i:(i+t-1))]==1)){
# count <- count+1
# runs[count] <- i
runs <- c(runs,i)
}
# if(count >0){
#   runs #<- runs[1:count]
# }else{
#   runs <- NULL
# }
return(runs)
}
set.seed(12)
y <- as.integer(runif(100000,min=0,max=2))
time1 <- system.time(findRunsM(y,2))
time2 <- system.time(findRunsWM(y,2))
time1
time2
time1 >time2 # time1 < time2- means allocating the memory can improve the efficiency of operation
#rainy prediction
preda <- function(x,k){
n <- length(x)
k2 <- k/2
pred <- vector(length = n-k)
for(i in 1:(n-k)){
if(sum(x[i:(i+k-1)])>=k2){
pred[i] <- 1
}else{
pred[i] <- 0
}
return(mean(abs(pred-x[(k+1):n])))
#return(pred)
}
a1 <- preda(y,3)
a2 <- preda(y,2)
a3 <- preda(y,4)
a4 <- preda(y,5)
#rainy prediction new
predb <- function(x,k){
n <- length(x)
k2 <- k/2
pred <- vector(length = n-k)
sm <- sum(x[1:k])
if(sm >= k2){
pred[1] <- 1
}else{
pred[1] <-0
}
if(n-k >= 2){
for(i in 2:(n-k)){
sm <- sm + x[i+k-1] - x[i-1]
if(sm >= k2){
pred[i] <- 1
}else{
pred[i] <- 0
}
return(mean(abs(pred-x[(k+1):n])))
}
b1 <- predb(y,3)
b2 <- predb(y,2)
b3 <- predb(y,4)
b4 <- predb(y,5)
predb <- function(x,k){
n <- length(x)
k2 <- k/2
pred <- vector(length = n-k)
#sm <- sum(x[1:k])
csx <- c(0,cumsum(x))
# if(sm >= k2){
#       pred[1] <- 1
# }else{
#       pred[1] <-0
# }
# if(n-k >= 2){
#       for(i in 2:(n-k)){
#             #sm <- sm + x[i+k-1] - x[i-1]
for(i in 1:(n-k)){
if(csx[i+k]-csx[i] >= k2){
pred[i]<-1
}else{
pred[i]<-0
}
#             if(sm >= k2){
#                   pred[i] <- 1
#             }else{
#                   pred[i] <- 0
#             }
#       }
# }
return(mean(abs(pred-x[(k+1):n])))
}
b1 <- predb(y,3)
b2 <- predb(y,2)
b3 <- predb(y,4)
b4 <- predb(y,5)
cumsum(rnorm(10))
cumsum(c(1,2,3,4,5))
predc <- function(x,k){
n <- length(x)
k2 <- k/2
pred <- vector(length = n-k)
csx <- c(0,cumsum(x))
for(i in 1:(n-k)){
if(csx[i+k]-csx[i] >= k2){
pred[i]<-1
}else{
pred[i]<-0
}
return(mean(abs(pred-x[(k+1):n])))
}
predb <- function(x,k){
n <- length(x)
k2 <- k/2
pred <- vector(length = n-k)
sm <- sum(x[1:k])
csx <- c(0,cumsum(x))
if(sm >= k2){
pred[1] <- 1
}else{
pred[1] <-0
}
if(n-k >= 2){
for(i in 2:(n-k)){
#sm <- sm + x[i+k-1] - x[i-1]
if(sm >= k2){
pred[i] <- 1
}else{
pred[i] <- 0
}
return(mean(abs(pred-x[(k+1):n])))
}
b1 <- predb(y,3)
b2 <- predb(y,2)
b3 <- predb(y,4)
b4 <- predb(y,5)
c1 <- predc(y,3)
c2 <- predc(y,2)
c3 <- predc(y,4)
c4 <- predc(y,5)
predb <- function(x,k){
n <- length(x)
k2 <- k/2
pred <- vector(length = n-k)
sm <- sum(x[1:k])
csx <- c(0,cumsum(x))
if(sm >= k2){
pred[1] <- 1
}else{
pred[1] <-0
}
if(n-k >= 2){
for(i in 2:(n-k)){
sm <- sm + x[i+k-1] - x[i-1]
if(sm >= k2){
pred[i] <- 1
}else{
pred[i] <- 0
}
return(mean(abs(pred-x[(k+1):n])))
}
b1 <- predb(y,3)
b2 <- predb(y,2)
b3 <- predb(y,4)
b4 <- predb(y,5)
?stop
iter <- 12
try(if(iter > 10) stop("too many iterations"))
iter <- 12
try(if(iter > 10) stop("lol"))
sapply(1:8,mean)
sapply(1:8,sum)
?null
?NULL
1:8-1 #“：” has a higher priority than regular rule of algorithm
na <- c(NA,1,NA,2,NA,3,NA,8)
na[is.na(na)] <- 100
na
na[na>3]
foo <- runif(10)
foo[foo>0.23]
fooN <- c(NA,foo,NA,12)
fooN[fooN>0.23]
foo == fooN
try{foo == fooN}
try(foo == fooN)
try(foo == fooN)stop("???")
try((foo == fooN) stop("???"))
try(if(foo == fooN) stop("???"))
try(foo == fooN)
try(foo == fooN,warnings("hahh"))
subset(fooN,fooN>0.23)
which(fooN,fooN==NA)
which(fooN,x = NA)
which(fooN,x == NA)
which(fooN==NA)
which(fooN=NA)
which(fooN>0.23)
which(fooN == NA)
fooN
which(is.na(fooN))
fooN(which(fooN>0.23))
fooN[which(fooN>0.23)]
fooN[which(is.na(fooN))]
vec <- runif(100,0,100)
ifelse(vec>10,TRUE,FALSE)
ifelse(vec%%2==0,"even num","odd num")
ifelse(as.integer(vec)%%2==0,"even num","odd num")
as.integer(vec)
ifelse(round(vec)%%2==0,"even num","odd num")
round(vec)
round(x = vec,digits = 0)
findud <- function(v){
vud <- v[-1]-v[-length(v)]
return(ifelse(vud>0,1,-1))
}
udcorr <- function(x,y){
ud <- lapply(list(x,y),findud)
return(mean(ud[[1]]==ud[[2]]))
}
？lapply
?lapply
xx <- runif(10,10,20)
xx[-1]
xx[-length(xx)]
yy <- runif(10,10,20)
udcorr(xx,yy)
udcorrS <- function(x,y){
return(mean(sign(diff(x)) == sign(diff(y))))
}
udcorrs(xx,yy)
udcorrS(xx,yy)
xx
yy
plot(xx,yy)
plot(yy~xx)
xx == yy
all(xx==yy)
identical(xx,yy)
xxx <- 1:3
yyy <- c(1,2,3)
identical(xxx,yyy)
c(6,6,list(1,2))
c(6,6,list(a=1,b=2))
c(6,6,list(a=c(1,3,4,5),b=2))
c(6,6,list(a=c(1,3,4,5),b="a"))
q<-c(6,6,list(a=c(1,3,4,5),b="a"))
str(q)
q$``
class(q)
q[1]
q[[1]]
q[[2]]
q[[3]]
q[[4]]
q[2]
q[3]
q[4]
q[[3]][1]
q[[3]][2]
mean(72,65,82,90,76)
setwd("E:/Rtest/Demos/business_and_economic_statistics")
